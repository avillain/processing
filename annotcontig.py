#!/usr/bin/python
# -*- coding: utf-8 -*-

# Villain Adrien
# 2015
# villain.adrien@gmail.com

import os
import re
import sys
import argparse
import warnings
import subprocess
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.Blast import NCBIXML



def validate(seq, alphabet='dna'):
## Source : https://www.biostars.org/p/102/ Giovanni M Dall'Olio 
    """ Check that a sequence only contains values from an alphabet """
    alphabets = {'dna': re.compile('^[acgtn]*$', re.I), 
             'protein': re.compile('^[acdefghiklmnpqrstvwy]*$', re.I)}
    if alphabets[alphabet].search(seq) is not None:
         return True
    else:
         return False


def blastorfcandidates(orfasta, nthreads=1):
    """ Runs blast to validate hmmsearch hits """
    blout=os.path.basename(os.path.splitext(orfasta)[0])+"_blast.xml"
    if os.path.isfile(blout):
        print "Validation of candidate ORFs by blast already performed\n"
    else:
        print "Running blast on %s to validate candidate ORFs\n" %orfasta
        try:
            return_code = subprocess.call(
          "blastp -outfmt 5 -max_target_seqs 10 -num_threads %d -evalue 0.1 -db "
          "Uniref90-YSLV1234-ALM-Mav-Gut-Br-As.fa -query '%s' > '%s'" %(
                                          nthreads, orfasta, blout), shell=True)
        except:
            print "Error running blast on file %s\n" %orfasta
            raise
    return blout


def hitviro(hit):
    """ Determines if a hit is virophagic """
    keywords=["virophage", "mavirus", "yslv", "ylv", "alm", "sptnk", "sputnik",
              "zamilon", "gut", "as_", "mar_", "mv"]
    for w in keywords:
        if w in hit.lower():
            return 1
    return 0

def parseblastorf(xmlout, d):
    """ Parses xml blastp ouptput to identify proteins """
    bname=os.path.basename(os.path.splitext(xmlout)[0])
    output=bname+"_parsed.out"
    try:
        cname=re.match("(.*)_ORFs.*", bname).groups()[0]
        bname=cname
    except:
        raise
    if os.path.isfile(output):
        print "Blast xml parsing already performed : %s\n" %output
    else:
        print "Parsing blast xml file  %s\n" %xmlout
        try:
            out=""
            with open(xmlout, 'r') as xmlin:
                blast_records = NCBIXML.parse(xmlin)
                for record in blast_records:
                    gen=record.query.split('|')
                    st=gen[3]
                    s=gen[4]
                    e=gen[5]
                    out+="%s\t%s\t%s\t%s\t%s\t%s" %(
                                      bname, gen[0], st, s, e, d[gen[0]])
                    if record.alignments:
                        flag=0
                        for ali in record.alignments:
                            if flag:
                                break
                            hit=ali.hit_def.replace("\n","")
                            ev=str(ali.hsps[0].expect)
                            if hitviro(hit):
                                flag=1
                            out+= "\t%s\t%s" %(hit, ev)
                    else:
                        out+="\tNo hits found"
                    out+="\n"
            with open(output, "w") as filout:
                filout.write(out)
        except:
            print "Error parsing blast xml output file %s\n" %xmlout
            raise
    return output

def callgenemark(fasta):
    """ Calls genemark to predict Open Reading Frames """
    genout=os.path.basename(os.path.splitext(fasta)[0])+"_ORFs"
    if os.path.isfile(genout):
        print "ORFs prediction by GeneMarkS already performed : %s\n" %genout
    else:
        print "Running GeneMarkS on %s to predict ORFs\n" %fasta
        try:
            return_code = subprocess.call("gmsn.pl --virus -fnn -faa --output "
                                          "%s %s" %(genout, fasta), shell=True)
        except:
            print "Error running GeneMark on file %s\n" %fasta
            raise
    return genout

def getorfa(fasta):
    """ Returns a dictionary of ORFs generated by GeneMark """
    d={}
    with open(fasta, 'r') as filfa:
        seq=''
        for l in filfa:
            if l[:1]=='>':
                if seq:
                    d[name]=seq
                    seq=''
                name=re.match("^>(gene_\d+)|.*$", l.strip()).groups()[0]
            else:
                seq+=l.strip()
        d[name]=seq
    return d

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
                   description="Annotates a metagenomic contig (genemark ORF "
                   "prediction and blastp ORF identification)")
    parser.add_argument("fasta", help='DNA contig fasta file')
    parser.add_argument("-e","--evalue", help='maximum e-value for hit',
                        default=1e-5)
    parser.add_argument("-n","--cpu", type=int, help='Number of threads',
                        default=1)
    
    if not sys.argv[1:] :
       sys.argv.append('-h')
    
    prog_name = os.path.basename(sys.argv[0])
    args = parser.parse_args()
    orfs=callgenemark(args.fasta)
    orfa=getorfa(orfs+".faa")
    blas=blastorfcandidates(orfs+".faa", args.cpu)
    pars=parseblastorf(blas, orfa)

